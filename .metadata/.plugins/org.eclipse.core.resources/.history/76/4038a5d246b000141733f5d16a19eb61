package nl.uva.td.game;

import java.util.LinkedList;
import java.util.List;

import nl.uva.td.experiment.Experiment;
import nl.uva.td.experiment.Score;
import nl.uva.td.game.map.GameField;
import nl.uva.td.game.map.Parser;
import nl.uva.td.test.ListTowerPlacement;
import nl.uva.td.test.SpawnSimpleCreeps;

import org.moeaframework.Executor;
import org.moeaframework.core.NondominatedPopulation;
import org.moeaframework.core.Solution;

public class Main {

    public static void main(final String[] args) {
        AI();
    }

    public static void TEST() {
        GameField gameField = Parser.parse();

        CreepAgent creepAgent = new SpawnSimpleCreeps();
        List<Integer> towerPlacements = new LinkedList<Integer>();

        TowerAgent towerAgent = new ListTowerPlacement(ListTowerPlacement.generateSimpleTowerList(towerPlacements),
                towerPlacements);

        GameManager gameManager = new GameManager(creepAgent, towerAgent, gameField, true);
        Score score = gameManager.dryRun();
    }

    public static void AI() {
        NondominatedPopulation result = new Executor().withProblemClass(Experiment.class).withAlgorithm("NSGAII")
                .withMaxEvaluations(10000).distributeOnAllCores().run();

        int solutionCounter = 0;
        for (Solution s : result) {
            System.out.print(++solutionCounter + ": " + s.getObjective(0) + " ");
            for (int variable = 0; variable < s.getNumberOfVariables(); ++variable) {
                System.out.print(s.getVariable(variable) + ", ");
            }
            System.out.println();
        }
    }
}
